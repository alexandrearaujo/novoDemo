package br.com.mv.demo.model;

import java.io.Serializable;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.LazyToOne;
import org.hibernate.annotations.LazyToOneOption;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Table(name = "DETALHE_TESTE")
@Getter @Setter @AllArgsConstructor @NoArgsConstructor @EqualsAndHashCode(of = "id")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class DetalheTeste implements Serializable {
	
	/**
	 * Generated by IDE
	 */
	private static final long serialVersionUID = 1L;

	@Id
	@Column(name = "ID")
	@SequenceGenerator(name = "SEQ_DETALHE_TESTE", sequenceName = "SEQ_DETALHE_TESTE", allocationSize = 0)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SEQ_DETALHE_TESTE")
	private Long id;
	
	@Column(name = "DESCRICAO")
	private String descricao;
	
	@ManyToOne
	@JoinColumn(name = "CD_TESTE")
//	@JsonManagedReference(value = "teste-detalhe")
	private Teste teste;
	
	@Basic(fetch = FetchType.LAZY)
	@OneToOne(mappedBy = "detalheTeste", cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
	@LazyToOne(LazyToOneOption.NO_PROXY)
//	@JsonIgnoreProperties({"detalheTeste"})
	private ComplementoDetalhe complemento;
	
	
	public void addComplemento(ComplementoDetalhe complemento) {
		complemento.setDetalheTeste(this);
		this.complemento = complemento;
	}
	
	public void removeComplemento() {
		complemento.setDetalheTeste(null);
		this.complemento = null;
	}

}
