package br.com.mv.demo.model;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Table(name = "COMPLEMENTO_DETALHE")
@Getter @Setter @AllArgsConstructor @NoArgsConstructor @EqualsAndHashCode(of = "id")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class ComplementoDetalhe implements Serializable {
	
	/**
	 * Generated by IDE
	 */
	private static final long serialVersionUID = 1846088004456323881L;

	@Id
	@Column(name = "ID")
	@SequenceGenerator(name = "SEQ_COMPLEMENTO_DETALHE", sequenceName = "SEQ_COMPLEMENTO_DETALHE", allocationSize = 0)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SEQ_COMPLEMENTO_DETALHE")
	private Long id;
	
	@Column(name = "DS_COMPLEMENTO")
	private String complemento;
	
	@OneToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CD_DETALHE_TESTE", unique = true)
	private DetalheTeste detalheTeste;

}
